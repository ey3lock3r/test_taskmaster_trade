"use client";

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  TrendingUp, 
  TrendingDown, 
  Activity, 
  DollarSign, 
  Settings, 
  BarChart3, 
  Zap, 
  Play, 
  Pause, 
  RefreshCw, 
  Filter, 
  Download, 
  Plus, 
  Search, 
  Calendar, 
  User, 
  Building, 
  Target, 
  Clock, 
  CheckCircle, 
  XCircle, 
  AlertCircle,
  Menu,
  X,
  ChevronLeft,
  ChevronRight,
  Home,
  FileText,
  Bell,
  LogOut,
  HelpCircle,
  Eye,
  Edit,
  Trash2,
  ArrowUpRight,
  ArrowDownRight
} from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Progress } from '@/components/ui/progress';

// Interfaces
interface PortfolioMetrics {
  totalValue: number;
  dailyPnL: number;
  dailyPnLPercent: number;
  totalPnL: number;
  totalPnLPercent: number;
  buyingPower: number;
}

interface BotMetrics {
  id: string;
  name: string;
  status: 'active' | 'paused' | 'stopped';
  strategy: string;
  dailyPnL: number;
  totalPnL: number;
  winRate: number;
  trades: number;
}

interface OptionContract {
  symbol: string;
  strike: number;
  expiry: string;
  type: 'call' | 'put';
  bid: number;
  ask: number;
  volume: number;
  openInterest: number;
  iv: number;
  delta: number;
  gamma: number;
  theta: number;
  vega: number;
}

interface Position {
  id: string;
  symbol: string;
  type: 'stock' | 'option';
  quantity: number;
  avgPrice: number;
  currentPrice: number;
  pnl: number;
  pnlPercent: number;
  broker: string;
  bot?: string;
}

interface Order {
  id: string;
  symbol: string;
  type: 'buy' | 'sell';
  quantity: number;
  price: number;
  status: 'pending' | 'filled' | 'cancelled';
  timestamp: string;
  broker: string;
  bot?: string;
}

interface BacktestResult {
  id: string;
  botName: string;
  strategy: string;
  period: string;
  totalReturn: number;
  sharpeRatio: number;
  maxDrawdown: number;
  winRate: number;
  totalTrades: number;
  avgTrade: number;
}

interface NavigationItem {
  id: string;
  name: string;
  icon: React.ComponentType<{ className?: string }>;
  href: string;
  badge?: string;
}

// Sidebar Component
const navigationItems: NavigationItem[] = [
  { id: "dashboard", name: "Dashboard", icon: Home, href: "/dashboard" },
  { id: "configuration", name: "Configuration", icon: Settings, href: "/configuration" },
  { id: "options-chain", name: "Options Chain", icon: BarChart3, href: "/options-chain" },
  { id: "orders-positions", name: "Orders & Positions", icon: FileText, href: "/orders-positions" },
  { id: "backtest", name: "Backtest", icon: Activity, href: "/backtest" },
];

function Sidebar({ activeTab, setActiveTab }: { activeTab: string; setActiveTab: (tab: string) => void }) {
  const [isOpen, setIsOpen] = useState(false);
  const [isCollapsed, setIsCollapsed] = useState(false);

  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 768) {
        setIsOpen(true);
      } else {
        setIsOpen(false);
      }
    };
    
    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const toggleSidebar = () => setIsOpen(!isOpen);
  const toggleCollapse = () => setIsCollapsed(!isCollapsed);

  const handleItemClick = (itemId: string) => {
    setActiveTab(itemId);
    if (window.innerWidth < 768) {
      setIsOpen(false);
    }
  };

  return (
    <>
      <button
        onClick={toggleSidebar}
        className="fixed top-6 left-6 z-50 p-3 rounded-lg bg-background shadow-md border border-border md:hidden hover:bg-muted transition-all duration-200"
        aria-label="Toggle sidebar"
      >
        {isOpen ? 
          <X className="h-5 w-5 text-foreground" /> : 
          <Menu className="h-5 w-5 text-foreground" />
        }
      </button>

      {isOpen && (
        <div 
          className="fixed inset-0 bg-black/40 backdrop-blur-sm z-30 md:hidden transition-opacity duration-300" 
          onClick={toggleSidebar} 
        />
      )}

      <div
        className={`
          fixed top-0 left-0 h-full bg-background border-r border-border z-40 transition-all duration-300 ease-in-out flex flex-col
          ${isOpen ? "translate-x-0" : "-translate-x-full"}
          ${isCollapsed ? "w-20" : "w-72"}
          md:translate-x-0 md:static md:z-auto
        `}
      >
        <div className="flex items-center justify-between p-5 border-b border-border bg-muted/30">
          {!isCollapsed && (
            <div className="flex items-center space-x-2.5">
              <div className="w-9 h-9 bg-primary rounded-lg flex items-center justify-center shadow-sm">
                <span className="text-primary-foreground font-bold text-base">OT</span>
              </div>
              <div className="flex flex-col">
                <span className="font-semibold text-foreground text-base">Options Trader</span>
                <span className="text-xs text-muted-foreground">Pro Platform</span>
              </div>
            </div>
          )}

          {isCollapsed && (
            <div className="w-9 h-9 bg-primary rounded-lg flex items-center justify-center mx-auto shadow-sm">
              <span className="text-primary-foreground font-bold text-base">OT</span>
            </div>
          )}

          <button
            onClick={toggleCollapse}
            className="hidden md:flex p-1.5 rounded-md hover:bg-muted transition-all duration-200"
            aria-label={isCollapsed ? "Expand sidebar" : "Collapse sidebar"}
          >
            {isCollapsed ? (
              <ChevronRight className="h-4 w-4 text-muted-foreground" />
            ) : (
              <ChevronLeft className="h-4 w-4 text-muted-foreground" />
            )}
          </button>
        </div>

        <nav className="flex-1 px-3 py-2 overflow-y-auto">
          <ul className="space-y-0.5">
            {navigationItems.map((item) => {
              const Icon = item.icon;
              const isActive = activeTab === item.id;

              return (
                <li key={item.id}>
                  <button
                    onClick={() => handleItemClick(item.id)}
                    className={`
                      w-full flex items-center space-x-2.5 px-3 py-2.5 rounded-md text-left transition-all duration-200 group
                      ${isActive
                        ? "bg-primary/10 text-primary"
                        : "text-muted-foreground hover:bg-muted hover:text-foreground"
                      }
                      ${isCollapsed ? "justify-center px-2" : ""}
                    `}
                    title={isCollapsed ? item.name : undefined}
                  >
                    <div className="flex items-center justify-center min-w-[24px]">
                      <Icon
                        className={`
                          h-4.5 w-4.5 flex-shrink-0
                          ${isActive 
                            ? "text-primary" 
                            : "text-muted-foreground group-hover:text-foreground"
                          }
                        `}
                      />
                    </div>
                    
                    {!isCollapsed && (
                      <div className="flex items-center justify-between w-full">
                        <span className={`text-sm ${isActive ? "font-medium" : "font-normal"}`}>{item.name}</span>
                        {item.badge && (
                          <Badge variant={isActive ? "default" : "secondary"} className="text-xs">
                            {item.badge}
                          </Badge>
                        )}
                      </div>
                    )}
                  </button>
                </li>
              );
            })}
          </ul>
        </nav>

        <div className="mt-auto border-t border-border">
          <div className="p-3">
            <button
              className={`
                w-full flex items-center rounded-md text-left transition-all duration-200 group
                text-destructive hover:bg-destructive/10
                ${isCollapsed ? "justify-center p-2.5" : "space-x-2.5 px-3 py-2.5"}
              `}
              title={isCollapsed ? "Logout" : undefined}
            >
              <LogOut className="h-4.5 w-4.5 flex-shrink-0" />
              {!isCollapsed && <span className="text-sm">Logout</span>}
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

// Dashboard Component
function Dashboard() {
  const portfolioMetrics: PortfolioMetrics = {
    totalValue: 125430.50,
    dailyPnL: 2340.25,
    dailyPnLPercent: 1.9,
    totalPnL: 15430.50,
    totalPnLPercent: 14.0,
    buyingPower: 45230.75
  };

  const botMetrics: BotMetrics[] = [
    {
      id: '1',
      name: 'Iron Condor Bot',
      status: 'active',
      strategy: 'Iron Condor',
      dailyPnL: 450.25,
      totalPnL: 3240.50,
      winRate: 78.5,
      trades: 24
    },
    {
      id: '2',
      name: 'Covered Call Bot',
      status: 'active',
      strategy: 'Covered Call',
      dailyPnL: 320.75,
      totalPnL: 2180.25,
      winRate: 82.3,
      trades: 18
    },
    {
      id: '3',
      name: 'Put Spread Bot',
      status: 'paused',
      strategy: 'Put Spread',
      dailyPnL: -125.50,
      totalPnL: 890.75,
      winRate: 65.2,
      trades: 12
    }
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-foreground">Dashboard</h1>
        <Button>
          <RefreshCw className="w-4 h-4 mr-2" />
          Refresh Data
        </Button>
      </div>

      {/* Portfolio Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Portfolio</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">${portfolioMetrics.totalValue.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground">
              +{portfolioMetrics.totalPnLPercent}% from last month
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Daily P&L</CardTitle>
            {portfolioMetrics.dailyPnL >= 0 ? (
              <TrendingUp className="h-4 w-4 text-green-600" />
            ) : (
              <TrendingDown className="h-4 w-4 text-red-600" />
            )}
          </CardHeader>
          <CardContent>
            <div className={`text-2xl font-bold ${portfolioMetrics.dailyPnL >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              ${portfolioMetrics.dailyPnL.toLocaleString()}
            </div>
            <p className="text-xs text-muted-foreground">
              {portfolioMetrics.dailyPnLPercent >= 0 ? '+' : ''}{portfolioMetrics.dailyPnLPercent}% today
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total P&L</CardTitle>
            <Activity className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className={`text-2xl font-bold ${portfolioMetrics.totalPnL >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              ${portfolioMetrics.totalPnL.toLocaleString()}
            </div>
            <p className="text-xs text-muted-foreground">
              {portfolioMetrics.totalPnLPercent >= 0 ? '+' : ''}{portfolioMetrics.totalPnLPercent}% all time
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Buying Power</CardTitle>
            <Target className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">${portfolioMetrics.buyingPower.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground">
              Available for trading
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Bot Performance */}
      <Card>
        <CardHeader>
          <CardTitle>Bot Performance</CardTitle>
          <CardDescription>Real-time performance metrics for your trading bots</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {botMetrics.map((bot) => (
              <div key={bot.id} className="flex items-center justify-between p-4 border border-border rounded-lg">
                <div className="flex items-center space-x-4">
                  <div className="flex items-center space-x-2">
                    <div className={`w-3 h-3 rounded-full ${
                      bot.status === 'active' ? 'bg-green-500' : 
                      bot.status === 'paused' ? 'bg-yellow-500' : 'bg-red-500'
                    }`} />
                    <span className="font-medium">{bot.name}</span>
                  </div>
                  <Badge variant="outline">{bot.strategy}</Badge>
                </div>
                <div className="flex items-center space-x-6 text-sm">
                  <div className="text-center">
                    <div className="text-muted-foreground">Daily P&L</div>
                    <div className={`font-medium ${bot.dailyPnL >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                      ${bot.dailyPnL.toLocaleString()}
                    </div>
                  </div>
                  <div className="text-center">
                    <div className="text-muted-foreground">Total P&L</div>
                    <div className={`font-medium ${bot.totalPnL >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                      ${bot.totalPnL.toLocaleString()}
                    </div>
                  </div>
                  <div className="text-center">
                    <div className="text-muted-foreground">Win Rate</div>
                    <div className="font-medium">{bot.winRate}%</div>
                  </div>
                  <div className="text-center">
                    <div className="text-muted-foreground">Trades</div>
                    <div className="font-medium">{bot.trades}</div>
                  </div>
                  <Button size="sm" variant={bot.status === 'active' ? 'outline' : 'default'}>
                    {bot.status === 'active' ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

// Configuration Component
function Configuration() {
  const [selectedBroker, setSelectedBroker] = useState('td-ameritrade');
  const [apiKey, setApiKey] = useState('');
  const [isConnected, setIsConnected] = useState(false);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-foreground">Configuration</h1>
      </div>

      <Tabs defaultValue="brokers" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="brokers">Broker Connections</TabsTrigger>
          <TabsTrigger value="bots">Bot Configuration</TabsTrigger>
        </TabsList>

        <TabsContent value="brokers" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Broker Connections</CardTitle>
              <CardDescription>Configure your broker API connections</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="broker">Select Broker</Label>
                  <Select value={selectedBroker} onValueChange={setSelectedBroker}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a broker" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="td-ameritrade">TD Ameritrade</SelectItem>
                      <SelectItem value="interactive-brokers">Interactive Brokers</SelectItem>
                      <SelectItem value="schwab">Charles Schwab</SelectItem>
                      <SelectItem value="etrade">E*TRADE</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="api-key">API Key</Label>
                  <Input
                    id="api-key"
                    type="password"
                    placeholder="Enter your API key"
                    value={apiKey}
                    onChange={(e) => setApiKey(e.target.value)}
                  />
                </div>

                <div className="flex items-center space-x-2">
                  <Switch
                    id="auto-connect"
                    checked={isConnected}
                    onCheckedChange={setIsConnected}
                  />
                  <Label htmlFor="auto-connect">Auto-connect on startup</Label>
                </div>

                <div className="flex space-x-2">
                  <Button>Test Connection</Button>
                  <Button variant="outline">Save Configuration</Button>
                </div>
              </div>

              <div className="border-t border-border pt-4">
                <h3 className="text-lg font-medium mb-4">Connection Status</h3>
                <div className="space-y-2">
                  <div className="flex items-center justify-between p-3 border border-border rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="w-3 h-3 rounded-full bg-green-500" />
                      <span>TD Ameritrade</span>
                    </div>
                    <Badge variant="outline" className="text-green-600">Connected</Badge>
                  </div>
                  <div className="flex items-center justify-between p-3 border border-border rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="w-3 h-3 rounded-full bg-red-500" />
                      <span>Interactive Brokers</span>
                    </div>
                    <Badge variant="outline" className="text-red-600">Disconnected</Badge>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="bots" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Bot Configuration</CardTitle>
              <CardDescription>Configure your trading bot strategies and parameters</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="bot-name">Bot Name</Label>
                  <Input id="bot-name" placeholder="Enter bot name" />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="strategy">Strategy</Label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="Select strategy" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="iron-condor">Iron Condor</SelectItem>
                      <SelectItem value="covered-call">Covered Call</SelectItem>
                      <SelectItem value="put-spread">Put Spread</SelectItem>
                      <SelectItem value="straddle">Straddle</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="max-risk">Max Risk ($)</Label>
                    <Input id="max-risk" type="number" placeholder="1000" />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="profit-target">Profit Target (%)</Label>
                    <Input id="profit-target" type="number" placeholder="50" />
                  </div>
                </div>

                <div className="flex items-center space-x-2">
                  <Switch id="auto-trade" />
                  <Label htmlFor="auto-trade">Enable auto-trading</Label>
                </div>

                <div className="flex space-x-2">
                  <Button>Create Bot</Button>
                  <Button variant="outline">Save as Template</Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

// Options Chain Component
function OptionsChain() {
  const [selectedSymbol, setSelectedSymbol] = useState('SPY');
  const [selectedExpiry, setSelectedExpiry] = useState('2024-01-19');
  const [selectedContracts, setSelectedContracts] = useState<OptionContract[]>([]);

  const optionContracts: OptionContract[] = [
    {
      symbol: 'SPY240119C00480000',
      strike: 480,
      expiry: '2024-01-19',
      type: 'call',
      bid: 2.45,
      ask: 2.50,
      volume: 1250,
      openInterest: 5420,
      iv: 0.18,
      delta: 0.65,
      gamma: 0.012,
      theta: -0.08,
      vega: 0.15
    },
    {
      symbol: 'SPY240119P00480000',
      strike: 480,
      expiry: '2024-01-19',
      type: 'put',
      bid: 1.85,
      ask: 1.90,
      volume: 980,
      openInterest: 3210,
      iv: 0.16,
      delta: -0.35,
      gamma: 0.012,
      theta: -0.06,
      vega: 0.13
    }
  ];

  const handleContractSelect = (contract: OptionContract) => {
    setSelectedContracts(prev => {
      const exists = prev.find(c => c.symbol === contract.symbol);
      if (exists) {
        return prev.filter(c => c.symbol !== contract.symbol);
      }
      return [...prev, contract];
    });
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-foreground">Options Chain</h1>
        <div className="flex space-x-2">
          <Button variant="outline">
            <Download className="w-4 h-4 mr-2" />
            Export
          </Button>
          <Button>
            <RefreshCw className="w-4 h-4 mr-2" />
            Refresh
          </Button>
        </div>
      </div>

      {/* Filters */}
      <Card>
        <CardContent className="pt-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label htmlFor="symbol">Symbol</Label>
              <Input
                id="symbol"
                value={selectedSymbol}
                onChange={(e) => setSelectedSymbol(e.target.value)}
                placeholder="Enter symbol"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="expiry">Expiration</Label>
              <Select value={selectedExpiry} onValueChange={setSelectedExpiry}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="2024-01-19">Jan 19, 2024</SelectItem>
                  <SelectItem value="2024-01-26">Jan 26, 2024</SelectItem>
                  <SelectItem value="2024-02-02">Feb 2, 2024</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="broker">Broker</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Select broker" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="td-ameritrade">TD Ameritrade</SelectItem>
                  <SelectItem value="interactive-brokers">Interactive Brokers</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-end">
              <Button className="w-full">
                <Search className="w-4 h-4 mr-2" />
                Search
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Options Chain Table */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Options Chain - {selectedSymbol}</CardTitle>
              <CardDescription>Strike: $480.00 | Expiry: {selectedExpiry}</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Strike</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Bid</TableHead>
                    <TableHead>Ask</TableHead>
                    <TableHead>Volume</TableHead>
                    <TableHead>IV</TableHead>
                    <TableHead>Delta</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {optionContracts.map((contract) => (
                    <TableRow key={contract.symbol}>
                      <TableCell className="font-medium">{contract.strike}</TableCell>
                      <TableCell>
                        <Badge variant={contract.type === 'call' ? 'default' : 'secondary'}>
                          {contract.type.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>${contract.bid}</TableCell>
                      <TableCell>${contract.ask}</TableCell>
                      <TableCell>{contract.volume.toLocaleString()}</TableCell>
                      <TableCell>{(contract.iv * 100).toFixed(1)}%</TableCell>
                      <TableCell>{contract.delta.toFixed(3)}</TableCell>
                      <TableCell>
                        <div className="flex space-x-1">
                          <Button size="sm" variant="outline" className="text-green-600">
                            <ArrowUpRight className="w-3 h-3" />
                          </Button>
                          <Button size="sm" variant="outline" className="text-red-600">
                            <ArrowDownRight className="w-3 h-3" />
                          </Button>
                          <Button
                            size="sm"
                            variant={selectedContracts.find(c => c.symbol === contract.symbol) ? 'default' : 'outline'}
                            onClick={() => handleContractSelect(contract)}
                          >
                            <Plus className="w-3 h-3" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </div>

        {/* Payoff Chart */}
        <div>
          <Card>
            <CardHeader>
              <CardTitle>Payoff Chart</CardTitle>
              <CardDescription>Selected contracts: {selectedContracts.length}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-64 flex items-center justify-center border border-border rounded-lg bg-muted/20">
                <div className="text-center text-muted-foreground">
                  <BarChart3 className="w-12 h-12 mx-auto mb-2" />
                  <p>Select contracts to view payoff chart</p>
                </div>
              </div>
              {selectedContracts.length > 0 && (
                <div className="mt-4 space-y-2">
                  <h4 className="font-medium">Selected Contracts:</h4>
                  {selectedContracts.map((contract) => (
                    <div key={contract.symbol} className="flex items-center justify-between text-sm">
                      <span>{contract.strike} {contract.type.toUpperCase()}</span>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => handleContractSelect(contract)}
                      >
                        <X className="w-3 h-3" />
                      </Button>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

// Orders and Positions Component
function OrdersAndPositions() {
  const [filterBroker, setFilterBroker] = useState('all');
  const [filterBot, setFilterBot] = useState('all');

  const positions: Position[] = [
    {
      id: '1',
      symbol: 'SPY',
      type: 'stock',
      quantity: 100,
      avgPrice: 475.50,
      currentPrice: 478.25,
      pnl: 275.00,
      pnlPercent: 0.58,
      broker: 'TD Ameritrade'
    },
    {
      id: '2',
      symbol: 'SPY240119C00480000',
      type: 'option',
      quantity: 5,
      avgPrice: 2.45,
      currentPrice: 2.60,
      pnl: 75.00,
      pnlPercent: 6.12,
      broker: 'TD Ameritrade',
      bot: 'Iron Condor Bot'
    }
  ];

  const orders: Order[] = [
    {
      id: '1',
      symbol: 'AAPL240119C00185000',
      type: 'buy',
      quantity: 2,
      price: 3.50,
      status: 'pending',
      timestamp: '2024-01-15 09:30:00',
      broker: 'TD Ameritrade',
      bot: 'Covered Call Bot'
    },
    {
      id: '2',
      symbol: 'TSLA',
      type: 'sell',
      quantity: 50,
      price: 245.75,
      status: 'filled',
      timestamp: '2024-01-15 10:15:00',
      broker: 'Interactive Brokers'
    }
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-foreground">Orders & Positions</h1>
        <div className="flex space-x-2">
          <Button variant="outline">
            <Filter className="w-4 h-4 mr-2" />
            Filter
          </Button>
          <Button>
            <Plus className="w-4 h-4 mr-2" />
            New Order
          </Button>
        </div>
      </div>

      {/* Filters */}
      <Card>
        <CardContent className="pt-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="filter-broker">Filter by Broker</Label>
              <Select value={filterBroker} onValueChange={setFilterBroker}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Brokers</SelectItem>
                  <SelectItem value="td-ameritrade">TD Ameritrade</SelectItem>
                  <SelectItem value="interactive-brokers">Interactive Brokers</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="filter-bot">Filter by Bot</Label>
              <Select value={filterBot} onValueChange={setFilterBot}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Bots</SelectItem>
                  <SelectItem value="iron-condor">Iron Condor Bot</SelectItem>
                  <SelectItem value="covered-call">Covered Call Bot</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-end">
              <Button variant="outline" className="w-full">
                Clear Filters
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      <Tabs defaultValue="positions" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="positions">Current Positions</TabsTrigger>
          <TabsTrigger value="orders">Pending Orders</TabsTrigger>
          <TabsTrigger value="history">Order History</TabsTrigger>
        </TabsList>

        <TabsContent value="positions">
          <Card>
            <CardHeader>
              <CardTitle>Current Positions</CardTitle>
              <CardDescription>Your active positions across all brokers</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Symbol</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Quantity</TableHead>
                    <TableHead>Avg Price</TableHead>
                    <TableHead>Current Price</TableHead>
                    <TableHead>P&L</TableHead>
                    <TableHead>Broker</TableHead>
                    <TableHead>Bot</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {positions.map((position) => (
                    <TableRow key={position.id}>
                      <TableCell className="font-medium">{position.symbol}</TableCell>
                      <TableCell>
                        <Badge variant={position.type === 'stock' ? 'default' : 'secondary'}>
                          {position.type.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>{position.quantity}</TableCell>
                      <TableCell>${position.avgPrice}</TableCell>
                      <TableCell>${position.currentPrice}</TableCell>
                      <TableCell>
                        <div className={`${position.pnl >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          ${position.pnl.toLocaleString()} ({position.pnlPercent >= 0 ? '+' : ''}{position.pnlPercent}%)
                        </div>
                      </TableCell>
                      <TableCell>{position.broker}</TableCell>
                      <TableCell>{position.bot || '-'}</TableCell>
                      <TableCell>
                        <div className="flex space-x-1">
                          <Button size="sm" variant="outline">
                            <Eye className="w-3 h-3" />
                          </Button>
                          <Button size="sm" variant="outline">
                            <Edit className="w-3 h-3" />
                          </Button>
                          <Button size="sm" variant="outline" className="text-red-600">
                            <Trash2 className="w-3 h-3" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="orders">
          <Card>
            <CardHeader>
              <CardTitle>Pending Orders</CardTitle>
              <CardDescription>Orders waiting to be executed</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Symbol</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Quantity</TableHead>
                    <TableHead>Price</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Time</TableHead>
                    <TableHead>Broker</TableHead>
                    <TableHead>Bot</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {orders.filter(order => order.status === 'pending').map((order) => (
                    <TableRow key={order.id}>
                      <TableCell className="font-medium">{order.symbol}</TableCell>
                      <TableCell>
                        <Badge variant={order.type === 'buy' ? 'default' : 'secondary'}>
                          {order.type.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>{order.quantity}</TableCell>
                      <TableCell>${order.price}</TableCell>
                      <TableCell>
                        <Badge variant="outline" className="text-yellow-600">
                          <Clock className="w-3 h-3 mr-1" />
                          {order.status.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>{order.timestamp}</TableCell>
                      <TableCell>{order.broker}</TableCell>
                      <TableCell>{order.bot || '-'}</TableCell>
                      <TableCell>
                        <div className="flex space-x-1">
                          <Button size="sm" variant="outline">
                            <Edit className="w-3 h-3" />
                          </Button>
                          <Button size="sm" variant="outline" className="text-red-600">
                            <X className="w-3 h-3" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="history">
          <Card>
            <CardHeader>
              <CardTitle>Order History</CardTitle>
              <CardDescription>Completed and cancelled orders</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Symbol</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Quantity</TableHead>
                    <TableHead>Price</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Time</TableHead>
                    <TableHead>Broker</TableHead>
                    <TableHead>Bot</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {orders.filter(order => order.status !== 'pending').map((order) => (
                    <TableRow key={order.id}>
                      <TableCell className="font-medium">{order.symbol}</TableCell>
                      <TableCell>
                        <Badge variant={order.type === 'buy' ? 'default' : 'secondary'}>
                          {order.type.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>{order.quantity}</TableCell>
                      <TableCell>${order.price}</TableCell>
                      <TableCell>
                        <Badge variant={order.status === 'filled' ? 'default' : 'destructive'}>
                          {order.status === 'filled' ? (
                            <CheckCircle className="w-3 h-3 mr-1" />
                          ) : (
                            <XCircle className="w-3 h-3 mr-1" />
                          )}
                          {order.status.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>{order.timestamp}</TableCell>
                      <TableCell>{order.broker}</TableCell>
                      <TableCell>{order.bot || '-'}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

// Backtest Component
function Backtest() {
  const [selectedBot, setSelectedBot] = useState('iron-condor');
  const [startDate, setStartDate] = useState('2023-01-01');
  const [endDate, setEndDate] = useState('2023-12-31');
  const [isRunning, setIsRunning] = useState(false);

  const backtestResults: BacktestResult[] = [
    {
      id: '1',
      botName: 'Iron Condor Bot',
      strategy: 'Iron Condor',
      period: '2023-01-01 to 2023-12-31',
      totalReturn: 24.5,
      sharpeRatio: 1.85,
      maxDrawdown: -8.2,
      winRate: 78.5,
      totalTrades: 156,
      avgTrade: 0.85
    },
    {
      id: '2',
      botName: 'Covered Call Bot',
      strategy: 'Covered Call',
      period: '2023-01-01 to 2023-12-31',
      totalReturn: 18.3,
      sharpeRatio: 1.62,
      maxDrawdown: -5.4,
      winRate: 82.3,
      totalTrades: 124,
      avgTrade: 1.12
    }
  ];

  const runBacktest = () => {
    setIsRunning(true);
    setTimeout(() => {
      setIsRunning(false);
    }, 3000);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-foreground">Backtest</h1>
        <Button onClick={runBacktest} disabled={isRunning}>
          {isRunning ? (
            <>
              <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
              Running...
            </>
          ) : (
            <>
              <Play className="w-4 h-4 mr-2" />
              Run Backtest
            </>
          )}
        </Button>
      </div>

      {/* Backtest Configuration */}
      <Card>
        <CardHeader>
          <CardTitle>Backtest Configuration</CardTitle>
          <CardDescription>Configure your backtest parameters</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="bot-select">Select Bot</Label>
              <Select value={selectedBot} onValueChange={setSelectedBot}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="iron-condor">Iron Condor Bot</SelectItem>
                  <SelectItem value="covered-call">Covered Call Bot</SelectItem>
                  <SelectItem value="put-spread">Put Spread Bot</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="start-date">Start Date</Label>
              <Input
                id="start-date"
                type="date"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="end-date">End Date</Label>
              <Input
                id="end-date"
                type="date"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="initial-capital">Initial Capital ($)</Label>
              <Input id="initial-capital" type="number" placeholder="100000" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="commission">Commission per Trade ($)</Label>
              <Input id="commission" type="number" placeholder="1.00" />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Progress Bar */}
      {isRunning && (
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Running backtest...</span>
                <span>67%</span>
              </div>
              <Progress value={67} className="w-full" />
            </div>
          </CardContent>
        </Card>
      )}

      {/* Backtest Results */}
      <Card>
        <CardHeader>
          <CardTitle>Backtest Results</CardTitle>
          <CardDescription>Historical performance analysis</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Bot Name</TableHead>
                <TableHead>Strategy</TableHead>
                <TableHead>Period</TableHead>
                <TableHead>Total Return</TableHead>
                <TableHead>Sharpe Ratio</TableHead>
                <TableHead>Max Drawdown</TableHead>
                <TableHead>Win Rate</TableHead>
                <TableHead>Total Trades</TableHead>
                <TableHead>Avg Trade</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {backtestResults.map((result) => (
                <TableRow key={result.id}>
                  <TableCell className="font-medium">{result.botName}</TableCell>
                  <TableCell>
                    <Badge variant="outline">{result.strategy}</Badge>
                  </TableCell>
                  <TableCell>{result.period}</TableCell>
                  <TableCell>
                    <span className={`font-medium ${result.totalReturn >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                      {result.totalReturn >= 0 ? '+' : ''}{result.totalReturn}%
                    </span>
                  </TableCell>
                  <TableCell>{result.sharpeRatio}</TableCell>
                  <TableCell>
                    <span className="text-red-600">{result.maxDrawdown}%</span>
                  </TableCell>
                  <TableCell>{result.winRate}%</TableCell>
                  <TableCell>{result.totalTrades}</TableCell>
                  <TableCell>
                    <span className={`${result.avgTrade >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                      {result.avgTrade >= 0 ? '+' : ''}{result.avgTrade}%
                    </span>
                  </TableCell>
                  <TableCell>
                    <div className="flex space-x-1">
                      <Button size="sm" variant="outline">
                        <Eye className="w-3 h-3" />
                      </Button>
                      <Button size="sm" variant="outline">
                        <Download className="w-3 h-3" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Performance Chart */}
      <Card>
        <CardHeader>
          <CardTitle>Performance Chart</CardTitle>
          <CardDescription>Equity curve and drawdown analysis</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="h-64 flex items-center justify-center border border-border rounded-lg bg-muted/20">
            <div className="text-center text-muted-foreground">
              <BarChart3 className="w-12 h-12 mx-auto mb-2" />
              <p>Performance chart will appear here after running backtest</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

// Main Options Trading App Component
function OptionsTradingApp() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);

  const renderContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return <Dashboard />;
      case 'configuration':
        return <Configuration />;
      case 'options-chain':
        return <OptionsChain />;
      case 'orders-positions':
        return <OrdersAndPositions />;
      case 'backtest':
        return <Backtest />;
      default:
        return <Dashboard />;
    }
  };

  return (
    <div className="flex h-screen bg-background">
      <Sidebar activeTab={activeTab} setActiveTab={setActiveTab} />
      
            <div className="flex-1 md:ml-0">
        <main className="h-full overflow-auto">
          <div className="p-6 pt-20 md:pt-6">
            <AnimatePresence mode="wait">
              <motion.div
                key={activeTab}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.2 }}
              >
                {renderContent()}
              </motion.div>
            </AnimatePresence>
          </div>
        </main>
      </div>
    </div>
  );
}

export default OptionsTradingApp;
