"""Initial migration with correct bot_status and bot_instance relationships

Revision ID: 65db1d7c4462
Revises: 
Create Date: 2025-06-07 23:44:38.299380

"""
from typing import Sequence, Union
from datetime import datetime, timezone

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '65db1d7c4462'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('market_data_cache_option_chain',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('expiration_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('strike_price', sa.Float(), nullable=False),
    sa.Column('option_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('bid', sa.Float(), nullable=True),
    sa.Column('ask', sa.Float(), nullable=True),
    sa.Column('implied_volatility', sa.Float(), nullable=True),
    sa.Column('delta', sa.Float(), nullable=True),
    sa.Column('gamma', sa.Float(), nullable=True),
    sa.Column('theta', sa.Float(), nullable=True),
    sa.Column('vega', sa.Float(), nullable=True),
    sa.Column('open_interest', sa.Integer(), nullable=True),
    sa.Column('volume', sa.Integer(), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=timezone.utc), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_symbol_expiration', 'market_data_cache_option_chain', ['symbol', 'expiration_date'], unique=False)
    op.create_table('users',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('brokerage_connections',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('brokerage_name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('api_key', sa.LargeBinary(), nullable=True),
    sa.Column('api_secret', sa.LargeBinary(), nullable=True),
    sa.Column('access_token', sa.LargeBinary(), nullable=True),
    sa.Column('refresh_token', sa.LargeBinary(), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=timezone.utc), nullable=True),
    sa.Column('connection_status', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('last_connected', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sessions',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_id', sqlmodel.sql.sqltypes.AutoString(length=36), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('access_token', sqlmodel.sql.sqltypes.AutoString(length=512), nullable=False),
    sa.Column('refresh_token', sqlmodel.sql.sqltypes.AutoString(length=512), nullable=False),
    sa.Column('last_activity', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('logged_out_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sessions_session_id'), 'sessions', ['session_id'], unique=True)
    op.create_table('strategy_definitions',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('file_path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('class_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_strategy_definitions_name'), 'strategy_definitions', ['name'], unique=True)
    op.create_table('bot_instances',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('strategy_id', sa.Integer(), nullable=False),
    sa.Column('brokerage_connection_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('parameters', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['brokerage_connection_id'], ['brokerage_connections.id'], ),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategy_definitions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_bot_instances_name'), 'bot_instances', ['name'], unique=False)
    op.create_table('strategy_parameters',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('strategy_definition_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('value', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['strategy_definition_id'], ['strategy_definitions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('bot_status',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('bot_instance_id', sa.Integer(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('last_check_in', sa.DateTime(timezone=timezone.utc), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['bot_instance_id'], ['bot_instances.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_bot_status_bot_instance_id'), 'bot_status', ['bot_instance_id'], unique=False)
    op.create_table('positions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('bot_instance_id', sa.Integer(), nullable=False),
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('average_cost', sa.Float(), nullable=False),
    sa.Column('current_value', sa.Float(), nullable=True),
    sa.Column('opened_at', sa.DateTime(timezone=timezone.utc), nullable=False),
    sa.ForeignKeyConstraint(['bot_instance_id'], ['bot_instances.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('trade_orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('bot_instance_id', sa.Integer(), nullable=False),
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('order_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('price', sa.Float(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('executed_at', sa.DateTime(timezone=timezone.utc), nullable=True),
    sa.ForeignKeyConstraint(['bot_instance_id'], ['bot_instances.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('trade_orders')
    op.drop_table('positions')
    op.drop_index(op.f('ix_bot_status_bot_instance_id'), table_name='bot_status')
    op.drop_table('bot_status')
    op.drop_table('strategy_parameters')
    op.drop_index(op.f('ix_bot_instances_name'), table_name='bot_instances')
    op.drop_table('bot_instances')
    op.drop_index(op.f('ix_strategy_definitions_name'), table_name='strategy_definitions')
    op.drop_table('strategy_definitions')
    op.drop_index(op.f('ix_sessions_session_id'), table_name='sessions')
    op.drop_table('sessions')
    op.drop_table('brokerage_connections')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index('idx_symbol_expiration', table_name='market_data_cache_option_chain')
    op.drop_table('market_data_cache_option_chain')
    # ### end Alembic commands ###
